+ Stream gui ve luon hinh anh (co bounding box va ko co)


+ Exchange: amq.topic - Receive Iot event - 1 queue - all routing queue (topic) bind to this queue



+ Exchange: receive event from camera

+ queue_event_created: After receive event, save event temporarily to database
+ queue_event_with_video: After receive video from video generation service
+ queue_event_complete: 




Problem:
+ microservice domain recognition, save to database change - save to database 2 fields: domain and uri
+ need event key? Solution: database seeding
+ multiple websocket?





Problem:
+ iot_type, camera_type???


+ Tạm thời viết các API mà không cần populate các foreign key của nó


+ Viết visit xong ==> xử tới model các vụ update và delete



====================================
+ Viết xong các hàm của repo để biết dùng hàm delete hay update nào rồi mới viết các middleware của model cho các hàm đó
    + create: Có thể truyền vào object hay 1 mảng. Kết quả trả ra cũng có thể là object hoặc 1 mảng
        + Middleware: save (cho mỗi document)
    + findOneAndUpdate (dùng tiện hơn cách findOne rồi mới save trên document)
        + Middleware: findOneAndUpdate
    + findOneAndDelete, deleteMany
        + $ni, $ne in mongoose
    
+ Nhớ viết middleware cho iot_device_type và camera_type





+ Subscribe vào queue nhận iot event new => Có event lưu database => Gọi grpc để lấy video => Publish lên event media để verified
+ Subscribe vào queue nhận camera event new => Có event lưu database => Gọi grpc để lấy video => Publish lên event media để verified
+ Subscribe vào queue nhận event verified => lưu database => đổ vào socket




+ Hàm grpc để test thì tạm để dữ liệu giả trong lời gọi hàm

+ Duyệt qua tất cả các exchange, queue, với mỗi cái ta truyền vào hàm của event_context exchange name, queue name để nó lựa chọn nên gọi hàm callback nào



+ Có camera mới


+ Xóa camera


+ Sửa camera:


+ Thêm trường username, password của RTSP vào cho camera model (để gửi về bên controller lấy url về)

+ Handler trả về entity Event
+ Use lodash hoặc prefetch để chặn spam (OpenAI)

+ Tạm thời chỉ cần quan tâm populate cho các cái có khóa ngoại area
https://www.appsloveworld.com/mongodb/100/50/update-from-mongoose-post-findoneandupdate-hook
https://masteringjs.io/tutorials/express/query-parameters

Test video: https://raw.githubusercontent.com/intel-iot-devkit/sample-videos/master/people-detection.mp4






nếu chưa có area, building, floor, camera_map, iot_map thì thêm mới
à, phải check id trước
còn nếu đã có, thì update thông tin thôi

trong list camera_map và iot_mapo
check connect_camera_config với connect_iot_config trong 2 cái đó
coi có kết nối config hay không

nếu có thì update lại cái field "status" trong camera config, iot config thành "used"



Chua handle socket gui ve event


Write all iot event, camera event, event verified
Complete all grpc server
Complete all grpc client (sample test)
Control camera api

Gateway traffic forwarding


Them line_coords khi publish event camera ben AI server
khi nhan event (iot va camera) chi can luu thong tin cua iot va camera tuong ung. Schema dung middleware create de them thong tin cua map va type
Giai quyet camera_map quan sat iot_map (database đang lưu như thế) => khi cần query ra camera config nào đang quan sát iot config tốn chi phí




Area:

[
    {
        _id: "6162f9b9be1661cb32a1c447",
        area_name: "Area 1",
        area_type: "area"
    },
    {
        _id: "6162f9b9be1661cb32a1c448",
        area_name: "Area 2",
        area_type: "area"
    },




    {
        _id: "6162f9b9be1661cb32a1c459",
        area_name: "Area 3",
        area_type: "area"
    },

]



Camera
[
    {
        _id: "6162f9b9be1661cb32a1c447",
        camera_name: "Camera 1"
    },

    {
        _id: "6162f9b9be1661cb32a1c448",
        camera_name: "Camera 2"
    },



    {
        _id: "6162f9b9be1661cb32a1c459",
        camera_name: "Camera 3",
        event_type: "6162f9b9be1661cb32a1c447",
        status: "used",
        offset_x_begin: 20,
        offset_x_end: 30,
        offset_y_begin: 40,
        offset_y_end: 50
    }
    

]




Camera map
[
    {
        _id: "6162f9b9be1661cb32a1c447",
        camera_name: "Camera map 1",
        area: "6162f9b9be1661cb32a1c447",
        connect_camera: "6162f9b9be1661cb32a1c447"
    },

    {
        _id: "6162f9b9be1661cb32a1c448",
        camera_name: "Camera map 3",
        area: "6162f9b9be1661cb32a1c448",
        connect_camera: "6162f9b9be1661cb32a1c447"
    },





    {
        _id: "6162f9b9be1661cb32a1c459",
        camera_name: "Camera map 3",
        area: "6162f9b9be1661cb32a1c459",
        connect_camera: "6162f9b9be1661cb32a1c459",
        observe_iot: "6162f9b9be1661cb32a1c459"
    },

    

]








Iot Device
[
    {
        _id: "6162f9b9be1661cb32a1c447",
        iot_device_name: "Iot device 1"
    },

    {
        _id: "6162f9b9be1661cb32a1c448",
        iot_device_name: "Iot Device 2"
    },
    



    {
        _id: "6162f9b9be1661cb32a1c459",
        iot_device_name: "Iot Device 3", 
        zone: 3,
        event_type: "6162f9b9be1661cb32a1c447",
        status: "used"
    }

]




Iot Device Type
[
    {
        _id: "6162f9b9be1661cb32a1c447",
        iot_device_type_name: "Iot device type 1"
    },

    {
        _id: "6162f9b9be1661cb32a1c448",
        iot_device_type_name: "Iot Device type 2"
    },



    {
        _id: "6162f9b9be1661cb32a1c459",
        iot_device_type_name: "Iot Device type 3"
    }
    

]




Iot device map
[
    {
        _id: "6162f9b9be1661cb32a1c447",
        iot_device_name: "Iot device map 1",
        area: "6162f9b9be1661cb32a1c447",
        connect_iot: "6162f9b9be1661cb32a1c447"
    },

    {
        _id: "6162f9b9be1661cb32a1c448",
        iot_device_name: "Iot Device map 2",
        area: "6162f9b9be1661cb32a1c448",
        connect_iot: "6162f9b9be1661cb32a1c448"
    },

    {
        _id: "6162f9b9be1661cb32a1c449",
        iot_device_name: "Iot Device map 3",
        area: "6162f9b9be1661cb32a1c448",
        connect_iot: "6162f9b9be1661cb32a1c448"
    },




    {
        _id: "6162f9b9be1661cb32a1c459",
        iot_device_name: "Iot Device map 4",
        area: "6162f9b9be1661cb32a1c459",
        connect_iot: "6162f9b9be1661cb32a1c459",
        observed_status: "used"
    }
    

]



Event Type 

[
    {
        _id: "6162f9b9be1661cb32a1c447",
        event_key: "movement"
    },

    {
        _id: "6162f9b9be1661cb32a1c448",
        event_key: "door_open"
    }
]





Event


[
    {
        _id: "6162f9b9be1661cb32a1c447",
        event_type: "6162f9b9be1661cb32a1c447",
        iot_device: "6162f9b9be1661cb32a1c447",
        iot_device_map: "6162f9b9be1661cb32a1c447"
    },

    {
        _id: "6162f9b9be1661cb32a1c448",
        event_type: "6162f9b9be1661cb32a1c448",
        iot_device: "6162f9b9be1661cb32a1c448",
        iot_device_map: "6162f9b9be1661cb32a1c448"
    },







    {
        _id: "6162f9b9be1661cb32a1c459",
        event_type: "6162f9b9be1661cb32a1c447",
        iot_device: "6162f9b9be1661cb32a1c459",
        iot_device_map: "6162f9b9be1661cb32a1c459"
    }
]


socket: event_new, event_verified
Lấy full event detail


Exchange: amq.topic
Binding keys: home.alarm.zone_open
{
    "time": "2023-04-29T11:00:01Z",
    "zone": 3
}


Exchange: stream_processing
Binding keys: event.new.camera.*
{
    "camera_id": "6162f9b9be1661cb32a1c459",
    "event_time": "2023-04-29T11:00:01Z",
    "image_url": "https://media.timeout.com/images/105923036/750/562/image.jpg",
    "detection_image_url": "https://media.timeout.com/images/105923036/750/562/image.jpg",
    "event_key": "crowd_gathering"
}

{
    "camera_id": "6162f9b9be1661cb32a1c459",
    "event_time": "2023-04-29T11:00:01Z",
    "image_url": "https://media.timeout.com/images/105923036/750/562/image.jpg",
    "detection_image_url": "https://media.timeout.com/images/105923036/750/562/image.jpg",
    "event_key": "line_crossing"
}







report
event_type and iot_device_type
trong event model, iot_device và camera chỉ tồn tại 1 trong 2
event socket





Report:
http://localhost:3001/api/reports?action=find_all_event_statistic_count
http://localhost:3001/api/reports?action=find_number_of_iot_event_by_interval&area_id=6162f9b9be1661cb32a1c459&start_time=2023-04-30T03:38:17.904Z&end_time=2023-04-30T05:38:17.904Z&iot_device_type_id=6162f9b9be1661cb32a1c459&interval_type=week
http://localhost:3001/api/reports?action=find_number_of_iot_event_by_type&area_id=6162f9b9be1661cb32a1c459&start_time=2023-04-30T03:38:17.904Z&end_time=2023-04-30T05:38:17.904Z
http://localhost:3001/api/reports?action=find_number_of_iot_event_by_type_and_true_alarm&area_id=6162f9b9be1661cb32a1c459&start_time=2023-04-30T03:38:17.904Z&end_time=2023-04-30T05:38:17.904Z



fix event type
fix data_converter cua event type
fix $unwind event_type trong report_repository












===============REAL camera data TEST COMMUNICATION

{
    "time": "",
    "zone": 64
}

Event type
{
    _id: ObjectId("6162f9b9be1661cb32a1c447"),
    event_key: 'door_open'
}

{
    _id: ObjectId("6162f9b9be1661cb32a1c448"),
    event_key: 'movement'
}

{
    _id: ObjectId("6162f9b9be1661cb32a1c449"),
    event_key: 'crowd_gathering'
}

{
    _id: ObjectId("6162f9b9be1661cb32a1c450"),
    event_key: 'line_crossing'
}



Iot device 
{
    _id: ObjectId("6162f9b9be1661cb32a1c461"),
    iot_device_name: 'Cảm biến chuyển động PARADOX test',
    zone: 64,
    event_type: ObjectId("6162f9b9be1661cb32a1c447"),
    status: 'used'
}

Iot Device Map

{
    _id: ObjectId("6162f9b9be1661cb32a1c461"),
    iot_device_name: 'Cảm biến chuyển động khu vực test',
    address: 'Cảm biến ở địa chỉ ...',
    lat: 25,
    lng: -45,
    type: 'iot',
    observed_status: 'used',
    connect_iot: ObjectId("6162f9b9be1661cb32a1c461"),
    area: ObjectId("6162f9b9be1661cb32a1c461")
}


Camera Map 
{
    _id: ObjectId("6162f9b9be1661cb32a1c461"),
    camera_name: 'DTG Camera map PTZ',
    type: 'camera',
    connect_camera: ObjectId("6162f9b9be1661cb32a1c461"),
    observe_iot: ObjectId("6162f9b9be1661cb32a1c461"),
    area: ObjectId("6162f9b9be1661cb32a1c461") 
}

Camera
{
    _id: ObjectId("6162f9b9be1661cb32a1c461"),
    camera_name: "DTG Camera PTZ",
    rtsp_stream_url: "rtsp://tris.ddns.net:5564/Streaming/Channels/102?transportmode=unicast&profile=Profile_2",
    username: "admin",
    password: "Dientoan@123",
    event_type: ObjectId("6162f9b9be1661cb32a1c449")
}




=================================================
Camera
{
    "_id": "6162f9b9be1661cb32a1c461",
    "camera_name": "DTG Camera PTZ",
    "rtsp_stream_url": "rtsp://tris.ddns.net:5564/Streaming/Channels/102?transportmode=unicast&profile=Profile_2",
    "username": "admin",
    "status": "used",
    "password": "Dientoan@123",
    "event_type": "6162f9b9be1661cb32a1c449"
}


/api/event_types
{
    "_id": "6162f9b9be1661cb32a1c449",
    "event_key": 'crowd_gathering'
}

/api/cameras
{
    "_id": "6162f9b9be1661cb32a1c461",
    "camera_name": "DTG Camera PTZ",
    "rtsp_stream_url": "rtsp://tris.ddns.net:5564/Streaming/Channels/102?transportmode=unicast&profile=Profile_2",
    "username": "admin",
    "status": "used",
    "password": "Dientoan@123",
    "event_type": "6162f9b9be1661cb32a1c449",
    "camera_event_zone_coords": [5, 5, 630, 630],
    "iot_event_zone_coords": [5, 5, 540, 540]
}

/api/camera_maps
{
    "_id": "6162f9b9be1661cb32a1c461",
    "camera_name": "DTG Camera map PTZ updated 1",
    "type": "camera",
    "connect_camera": "6162f9b9be1661cb32a1c461",
    "observe_iot": "6162f9b9be1661cb32a1c461",
    "area": "6162f9b9be1661cb32a1c461"
}




{
    "_id": "6162f9b9be1661cb32a1c461",
    "camera_name": "DTG Camera PTZ",
    "rtsp_stream_url": "rtsp://tris.ddns.net:5564/Streaming/Channels/102?transportmode=unicast&profile=Profile_2",
    "username": "admin",
    "status": "used",
    "password": "Dientoan@123",
    "event_type": "6162f9b9be1661cb32a1c450",
    "offset_x_begin": 40,
    "offset_x_end": 50,
    "offset_y_begin": 60,
    "offset_y_end": 70,
    "is_set_line": true
}



sudo lsof -n -i :27017 | grep LISTEN


============Problem=========:
+ Service name and host name => Use file url address of rtsp sender
    + Tạm thời để dữ liệu test: 
        + camera_service.js
        + sfu_rtsp_stream_handler.js (getRecordFile, normalVideoUrl)
+ Event spam
+ Draw line when detection for line crossing
+ Handle update camera stream (cả của grpc client)
+ Fix denied mkdir logger
+ socket => DONE
+ Static file ben AI => DONE (Need to refactor)

+ Change datatype to Buffer for image in mongoose, with these models: area, iot_device_type, camera_type
+ Display opencv image in browser


+ ai event



+ Flow logic (Các logic này đang gỉa sử không có ngoại lệ xảy ra khi communication giữa các service):
    + Update:
        + (1 trong username, password, url, status đổi và cú là used) 
            + Nếu event_type cũ đang có && event_type mới khác event_type cũ
                + Delete AI
            + Disconnect rtsp

        + Nếu mới là used và kiểm tra thỏa mã các đk của (username, password, url) 
            + Connect rtsp
            + Nếu có event_type
                + Create bên AI

    + Thêm try...catch cho AI khi 1 stream tự động disconnect
    + Thêm xử lý ngoại lệ cho các communication giữa các server

    ==> Các logic sẽ đươc thực thi trong middleware của camera_model
+ Camera control


+ Set timezone logging AI
+ Fix post middleware for updating

+ Pre middleware for is_set_line


+ Trả về lỗi cho user khi các vấn đề liên quan đến stream không đúng info


Tasks:
    + Khi disconnect thì dù k disconnect rtsp trả về lỗi thì vẫn coi như thành công và disconnect tiếp AI
    + Khi connect thì nếu rtsp connect k được thì k đi tiếp để connect AI
    + Xóa 2 fields: is_connect_ai và is_connect_rtsp
    + Gửi các field mới: camera_event_zone và iot_event_zone qua cho AI và thêm logic xử lý các field này bên AI
    + Set is_set_line thành true khi mà các tọa độ line crossing có đủ
    + Implement spam policy cho các sự kiện ở message queue
    + Authen and author

    + Draw line detection

    + Xem lại khi download record file cần https không
    + Xóa các temp file bên AI
    + Sửa AI server dã connect hay disconnect vẫn trả về success

    + Tạm thời bên AI, hàm "consume_new_stream" cho time.sleep(2) trong khi chờ rtsp_server tạo ra rtsp stream. Sẽ nghĩ cách khác hay hơn
    + Kiểm tra lại nguyên nhân CPU ngốn nhìu bên AI khi hem wait stream, coi phải bị lỗi k

    + Tạm thời thiết lập lại event_time trong Event model không còn là time series field nữa

    + Xóa camera map thì chuyển lại thành used
    + Check lại cái event verifed chưa lưu dc vô db


    + Làm forceConnect full flow
    + Authen, author
    + Spam 


    + Cân nhắc:
        + Hiện thực retry giữa các connection:
            + Khi này DB phải lưu các trạng thái: Trạng thái connect hiện tại và trạng thái "ĐÁNG LẼ" phải xảy ra của từng connection (rtsp và AI)

