services:
  sfu:
    container_name: sfu
    image: golang:alpine
    volumes:
      - ./ion-sfu:/service/ion-sfu
      - ./ion-sfu/sfu.toml:/configs/sfu.toml
      - ./ion-sfu/logs:/logs
    working_dir: /service/ion-sfu
    # restart: always
    command: >
      sh -c "cat /configs/sfu.toml && go run ./cmd/signal/allrpc/main.go -c /configs/sfu.toml"
    environment:
      - gaddr=:5551
      - jaddr=:7000
    ports:
      - 7000:7000 # JSON RPC port
      - 5551:5551 # gRPC port
      - 5000:5000 # ICE mux port
    networks:
      - backend 
    
  rtsp-sender:
    container_name: rtsp_sender
    build:
      dockerfile: ./rtsp_sender/Dockerfile.local
      context: .
    volumes:
      - ./rtsp_sender:/service/rtsp_sender
      - ./rtsp_sender/rtsp_sender.toml:/configs/rtsp_sender.toml
      - ./rtsp_sender/rtsp-simple-server:/configs/rtsp-simple-server
      - ./rtsp_sender/rtsp-simple-server.yml:/configs/rtsp-simple-server.yml
      - ./rtsp_sender/logs:/logs
      - ./rtsp_sender/videos:/videos
    working_dir: /service/rtsp_sender
    # restart: always
    command: >
      sh -c "go run ./cmd/rtsp_sender/main.go -c /configs/rtsp_sender.toml"
    ports:
      - 5552:5551 # gRPC port
      - 8554:8554 # RTSP port
      - 8322:8322 # RTP port
      - 8080:8080 # HTTP port
      - 8000-8003:8000-8003 # multicast 
    environment:
    - GST_DEBUG=1
    networks:
      - backend

  mongodb:
    container_name: mongodb
    image: mongo
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=12345
    ports:
      - 27017:27017
    volumes:
      - mongodb_data:/data/db
    networks:
      - backend 

  message-broker-server:
    build:
      context: message-broker-server
      dockerfile: Dockerfile
    container_name: 'rabbitmq'
    ports:
        - 5672:5672
        - 15672:15672
        - 1883:1883
    volumes:
        - ./docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
        - ./docker-conf/rabbitmq/log/:/var/log/rabbitmq
    networks:
      - backend 

  event-simulator:
    build:
      context: event-simulator
      dockerfile: Dockerfile
    volumes:
      - ./event-simulator:/usr/app
      - event_node_modules:/usr/app/node_modules
    working_dir: /usr/app
    command: >
      sh -c "npm install && npm run dev"
    restart: always
    ports:
      - "3006:3006"
    depends_on:
      - mongodb

  node-api-server:
    container_name: node_api_server
    build:
      context: node-api-server
      dockerfile: Dockerfile
    environment:
      - BROKER_HOST=rabbitmq
    volumes:
      - ./node-api-server:/usr/app
      - api_node_modules:/usr/app/node_modules
    working_dir: /usr/app
    command: >
      sh -c "npm install && npm run dev"
    restart: always
    ports:
      - "3000:3000"
      - "50051:50051"
    depends_on:
      - message-broker-server
      - mongodb
    networks:
      - backend 

  node-api-gateway:
    container_name: node_api_gateway
    build:
      context: node-api-gateway
      dockerfile: Dockerfile
      # dockerfile: TestDockerfile
    # environment:
    #   - BROKER_HOST=rabbitmq
    volumes:
      - ./node-api-gateway:/usr/app
      - gateway_node_modules:/usr/app/node_modules
    working_dir: /usr/app
    command: >
      sh -c "npm run dev"
    restart: always
    ports:
      - "3001:3001"
    # depends_on:
    #   - node-api-server
    networks:
      - backend 

volumes:
  api_node_modules:
  gateway_node_modules:
  event_node_modules:
  mongodb_data:


networks:
  backend:
    external: true
    name: backend
    driver: bridge
