// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: pkg/proto/rtsp_sender.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RTSPSender_Connect_FullMethodName    = "/RTSPSender/Connect"
	RTSPSender_Disconnect_FullMethodName = "/RTSPSender/Disconnect"
)

// RTSPSenderClient is the client API for RTSPSender service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RTSPSenderClient interface {
	// Tell RTSPSender to connect to rtsp server and join sfu
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectReply, error)
	// Tell RTSPSender to disconnect to rtsp server
	Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*DisconnectReply, error)
}

type rTSPSenderClient struct {
	cc grpc.ClientConnInterface
}

func NewRTSPSenderClient(cc grpc.ClientConnInterface) RTSPSenderClient {
	return &rTSPSenderClient{cc}
}

func (c *rTSPSenderClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectReply, error) {
	out := new(ConnectReply)
	err := c.cc.Invoke(ctx, RTSPSender_Connect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTSPSenderClient) Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*DisconnectReply, error) {
	out := new(DisconnectReply)
	err := c.cc.Invoke(ctx, RTSPSender_Disconnect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RTSPSenderServer is the server API for RTSPSender service.
// All implementations must embed UnimplementedRTSPSenderServer
// for forward compatibility
type RTSPSenderServer interface {
	// Tell RTSPSender to connect to rtsp server and join sfu
	Connect(context.Context, *ConnectRequest) (*ConnectReply, error)
	// Tell RTSPSender to disconnect to rtsp server
	Disconnect(context.Context, *DisconnectRequest) (*DisconnectReply, error)
	mustEmbedUnimplementedRTSPSenderServer()
}

// UnimplementedRTSPSenderServer must be embedded to have forward compatible implementations.
type UnimplementedRTSPSenderServer struct {
}

func (UnimplementedRTSPSenderServer) Connect(context.Context, *ConnectRequest) (*ConnectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedRTSPSenderServer) Disconnect(context.Context, *DisconnectRequest) (*DisconnectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}
func (UnimplementedRTSPSenderServer) mustEmbedUnimplementedRTSPSenderServer() {}

// UnsafeRTSPSenderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RTSPSenderServer will
// result in compilation errors.
type UnsafeRTSPSenderServer interface {
	mustEmbedUnimplementedRTSPSenderServer()
}

func RegisterRTSPSenderServer(s grpc.ServiceRegistrar, srv RTSPSenderServer) {
	s.RegisterService(&RTSPSender_ServiceDesc, srv)
}

func _RTSPSender_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTSPSenderServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RTSPSender_Connect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTSPSenderServer).Connect(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTSPSender_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTSPSenderServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RTSPSender_Disconnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTSPSenderServer).Disconnect(ctx, req.(*DisconnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RTSPSender_ServiceDesc is the grpc.ServiceDesc for RTSPSender service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RTSPSender_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RTSPSender",
	HandlerType: (*RTSPSenderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _RTSPSender_Connect_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _RTSPSender_Disconnect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/rtsp_sender.proto",
}
